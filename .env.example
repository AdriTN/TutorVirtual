# === Backend Configuration ===

# --- FastAPI & Uvicorn ---
# Port on which the backend Uvicorn server will listen *inside* the container.
# Note: The `CMD` in Dockerfile and `command` in docker-compose.yml already specify a port (e.g., 8000).
# This variable is available if your app's code (e.g., settings.port in config.py) needs it.
# The `docker-compose.yml` maps a host port (e.g., 8000) to this internal port.
PORT=8000

# --- Database ---
# URL for connecting to the PostgreSQL database.
# For Docker setup, 'tutor_db' is the service name of the PostgreSQL container.
# Default user/password for the postgres Docker image is postgres/postgres if not overridden in docker-compose.yml.
DATABASE_URL="postgresql://postgres:postgres@tutor_db:5432/tutorvirtual"

# --- Authentication (JWT) ---
# Secret key for encoding and decoding JWTs.
# IMPORTANT: Use a long, random, and unique string for production.
# Generate one with: openssl rand -hex 32
JWT_SECRET="tu_super_secreta_clave_jwt_aqui_cambiala_por_algo_seguro"

# --- Google OAuth (Backend) ---
# Credentials for Google OAuth integration, obtained from Google Cloud Console.
GOOGLE_CLIENT_ID="tu_google_client_id_para_backend_aqui"
GOOGLE_CLIENT_SECRET="tu_google_client_secret_para_backend_aqui"
# Redirect URI registered in Google Cloud Console for the backend (if backend handles redirect directly).
# Often, the frontend handles the redirect, and this might be the frontend's URL.
# Verify based on your OAuth flow.
GOOGLE_REDIRECT_URI="http://localhost:5173/auth/google/callback" # Example, adjust to your flow

# --- Ollama / RAG Service (Backend) ---
# URL of the Ollama service.
# If running Ollama in another Docker container on the same Docker Compose network, use its service name (e.g., http://ollama:11434).
# If Ollama is on the host: http://host.docker.internal:11434 (Docker Desktop) or host's Docker bridge IP.
# If Ollama is external: the external URL.
OLLAMA_URL="http://host.docker.internal:11434" # Placeholder, adjust as needed
# Optional API Key if your Ollama or RAG service requires it.
API_KEY="tu_api_key_opcional_para_ollama_o_rag"

# === Frontend Configuration ===

# --- API Connection ---
# Full URL to the backend API. Vite will use this to proxy requests or make direct calls.
# This should match the URL where the backend is accessible from the user's browser.
VITE_BACKEND_URL="http://localhost:8000" # Matches backend service port mapping in docker-compose

# --- Google OAuth (Frontend) ---
# Google Client ID for the frontend, used to initiate the OAuth flow.
# This is often the same Client ID as the backend, but can be different depending on setup.
VITE_GOOGLE_CLIENT_ID="tu_google_client_id_para_frontend_aqui"

# === General Application Settings (Optional - used by backend config.py) ===
# Environment type (e.g., dev, prod, test)
ENV="dev"
# Auto create database tables (typically false for Docker if using Alembic migrations)
AUTO_CREATE_TABLES=False
# Run Alembic migrations on startup (handled by docker-compose command, can be false here)
RUN_MIGRATIONS_ON_STARTUP=False
# CORS origins if not using default localhost (space-separated or comma-separated list of URLs)
# Example: CORS_ORIGINS="http://localhost:5173 http://otro.dominio.com"
CORS_ORIGINS=""
# Ollama history messages window
OLLAMA_HISTORY_MESSAGES_WINDOW=6
